app:
  title: Dev Portal
  baseUrl: http://localhost:3000
organization:
  name: My Company

backend:
  auth:
    # TODO: once plugins have been migrated we can remove this, but right now it
    # is require for the backend to work
    dangerouslyDisableDefaultAuthPolicy: true

  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src:
      - "'self'"
      - 'data:'
      - 'https://avatars.githubusercontent.com'
      - 'https://circleci.com'
      - 'https://codecov.io'
      - 'https://dl.circleci.com'
      - 'https://github.com'
      - 'https://godoc.org'
      - 'https://goreportcard.com'
      - 'https://img.shields.io'
      - 'https://pkg.go.dev'
      - 'https://user-images.githubusercontent.com'
    script-src:
      - "'self'"
      - "'unsafe-eval'"
      - 'https://use.fortawesome.com'
    worker-src:
      - "'self'"
      - "'unsafe-eval'"
      - 'blob:'
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      apps:
        - $include: github-app-${BACKSTAGE_ENVIRONMENT}-credentials.yaml

permission:
  enabled: true

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives: 'local'
  publisher:
    type: 'local' # Alternatives: 'googleGcs', 'awsS3'

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters: []

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    github:
      development:
        clientId: ${GITHUB_OAUTH_CLIENT_ID}
        clientSecret: ${GITHUB_OAUTH_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  rules:
    - allow:
        - API
        - Component
        - Domain
        - Group
        - Location
        - Resource
        - System
        - User
        - Template

grafana:
  domain: https://example.com
