app:
  title: Dev Portal
  baseUrl: http://localhost:3000
  support:
    url: https://github.com/giantswarm/giantswarm/labels/component%2Fdevportal
    items:
      - title: Issues
        icon: github
        links:
          - url: https://github.com/giantswarm/giantswarm/labels/component%2Fdevportal
            title: GitHub Issues
      - title: Slack discussion
        icon: chat
        links:
          - url: https://gigantic.slack.com/archives/C055VLMTPFE
            title: '#wg-dev-portal'

organization:
  name: Giant Swarm

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src:
      - "'self'"
      - 'data:'
      - 'https://avatars.githubusercontent.com'
      - 'https://circleci.com'
      - 'https://codecov.io'
      - 'https://dl.circleci.com'
      - 'https://godoc.org'
      - 'https://goreportcard.com'
      - 'https://img.shields.io'
      - 'https://pkg.go.dev'
      - 'https://user-images.githubusercontent.com'
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'
    # client: pg
    # connection:
    #   host: localhost
    #   port: 5432
    #   user: backstage
    #   password: ${POSTGRES_PASSWORD}
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  reading:
    allow:
    - host: "*.giantswarm.io"

integrations:
  github:
    - host: github.com
      apps:
        - $include: github-app-${BACKSTAGE_ENVIRONMENT}-credentials.yaml

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # '/test':
  #   target: 'https://example.com'
  #   changeOrigin: true
  /circleci/api:
    target: https://circleci.com/api/v1.1
    headers:
      Circle-Token: ${CIRCLECI_API_TOKEN}
  /grafana/api:
    target: https://giantswarm.grafana.net/
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN}
  /opsgenie/api:
    target: https://api.opsgenie.com
    headers:
      Authorization: GenieKey ${OPSGENIE_API_KEY}
  /quay/api:
    target: 'https://quay.io'
    changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives: 'local'
  publisher:
    type: 'local' # Alternatives: 'googleGcs', 'awsS3'

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    github:
      development:
        clientId: ${GITHUB_OAUTH_CLIENT_ID}
        clientSecret: ${GITHUB_OAUTH_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  rules:
    - allow:
      - API
      - Component
      - Domain
      - Group
      - Location
      - Resource
      - System
      - User

grafana:
  domain: https://giantswarm.grafana.net

opsgenie:
  domain: https://giantswarm.app.opsgenie.com
