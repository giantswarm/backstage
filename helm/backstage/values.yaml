name: backstage
namespace: backstage

backstageDiscovery:
  # Value to set for the backstage.io/kubernetes-id label in resources, for discovery in Backstage.
  kubernetesId: backstage

userID: 1000
groupID: 1000

image:
  name: backstage
  repository: giantswarm/backstage

port: 7007

postgresql:
  host: ''
  port: ''
  user: ''
  password: ''

registry:
  domain: gsoci.azurecr.io

resources:
  verticalPodAutoscaler:
    enabled: true
  requests:
    cpu: 30m
    memory: 300M
  limits:
    cpu: 500m
    memory: 600M

authSessionSecret: ''

circleci:
  apiToken: ''

dexAuthCredentials: {}
#  example:
#    clientID: "example"
#    clientSecret: "example"

githubAuthCredentials:
  clientID: ''
  clientSecret: ''

githubAppCredentials:
  appId: 0
  webhookUrl: ''
  clientId: ''
  clientSecret: ''
  webhookSecret: ''
  privateKey: ''

grafana:
  apiToken: ''

# Quay plugin configuration
quay:
  apiToken: ''

sentry:
  app:
    dsn: ''
  backend:
    dsn: ''

telemetrydeck:
  salt: ''

aws:
  accessKeyID: ''
  secretAccessKey: ''

# Allows to define the sharedConfig as a multiline string that generates a ConfigMap
# automatically. Configuration defined here can be referenced in the main app configuration
# with $include keyword.
# E.g:
# sharedConfig:
#   gs:
#     kubernetesVersions:
#       '1.28':
#         eolDate: '2024-10-28'
#         minorVersion: '1.28'
sharedConfig: {}

# Can be used to assign pods to the node pool. E.g. - giantswarm.io/machine-deployment: a1b2c
# Docs - https://docs.giantswarm.io/advanced/node-pools/#assigning-workloads
nodeSelector: {}

# Upstream Backstage chart configuration
# https://github.com/backstage/charts/blob/main/charts/backstage/values.yaml

# -- Backstage parameters
# @default -- See below
backstage:
  # -- Backstage container command
  command: ['node', 'packages/backend']

  # -- Backstage container command arguments
  args: []

  # -- Extra app configuration files to inline into command arguments
  extraAppConfig: []

  # Allows to define the appConfig as a multiline string that generates a ConfigMap
  # automatically, not requiring to have it pre provisioned as with the extraAppConfig key.
  # DO NOT USE if you need to put sensitive data in the appConfig.
  # E.g:
  # appConfig:
  #   app:
  #     baseUrl: https://somedomain.tld
  # -- Generates ConfigMap and configures it in the Backstage pods
  appConfig: {}

  # -- Backstage container environment variables
  extraEnvVars: []

  # -- Backstage container environment variables from existing ConfigMaps
  extraEnvVarsCM: []

  # -- Backstage container environment variables from existing Secrets
  extraEnvVarsSecrets: []

  # -- Backstage container additional volume mounts
  extraVolumeMounts: []

  # -- Backstage container additional volumes
  extraVolumes: []

database:
  enabled: false
  exposed: false
  clusterNameSuffix: pgsql
  # -- Repostory and tag to use for the PostgreSQL cluster. Registry will be set to .Values.registry.domain.
  image: giantswarm/postgresql-cnpg:17.4@sha256:458058e3db40bb83898d096e6d78c07d28a084731dd9758937b42a3943ce26d0
  hostname: ''
  roles: []
  storageSize: 1Gi

ingress:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-giantswarm
    kubernetes.io/tls-acme: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
  hostnames: []
