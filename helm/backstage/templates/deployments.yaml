---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.name }}
    {{- include "labels.backstage" $ | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
      component: backstage
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
        component: backstage
        app.kubernetes.io/instance: {{ .Chart.Name }}
        {{- include "labels.backstage" $ | nindent 8 }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: {{ .Values.name }}
              topologyKey: kubernetes.io/hostname
      serviceAccountName: {{ .Values.name }}
      securityContext:
        runAsUser: {{ .Values.userID }}
        runAsGroup: {{ .Values.groupID }}
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: {{ .Values.image.name }}
          image: "{{ .Values.registry.domain }}/{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: {{ .Values.port }}
          {{- if .Values.backstage.command }}
          command: {{- .Values.backstage.command | toYaml | nindent 12 }}
          {{- end }}
          args:
          {{- range .Values.backstage.args }}
            - {{ . | quote }}
          {{- end }}
          {{- if .Values.backstage.appConfig }}
            - "--config"
            - "app-config-from-configmap.yaml"
          {{- end }}
          {{- if .Values.backstage.extraAppConfig }}
          {{- range .Values.backstage.extraAppConfig }}
            - "--config"
            - "{{ .filename }}"
          {{- end }}
          {{- end }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          envFrom:
            - secretRef:
                name: {{ .Values.name }}-secrets
            {{- if .Values.dexAuthCredentials }}
            - secretRef:
                name: {{ .Values.name }}-dex-auth-credentials-secret
            {{- end }}
            {{- range .Values.backstage.extraEnvVarsCM }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
            {{- range .Values.backstage.extraEnvVarsSecrets }}
            - secretRef:
                name: {{ . }}
            {{- end }}
          env:
            - name: VERSION
              value: "{{ .Chart.AppVersion }}"
            {{- if eq .Values.database.engine "postgresql" }}
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Chart.Name }}-{{ .Values.database.postgresql.clusterNameSuffix }}-app
                  key: host
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Chart.Name }}-{{ .Values.database.postgresql.clusterNameSuffix }}-app
                  key: port
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Chart.Name }}-{{ .Values.database.postgresql.clusterNameSuffix }}-app
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Chart.Name }}-{{ .Values.database.postgresql.clusterNameSuffix }}-app
                  key: password
            {{- end }}
            {{- if .Values.backstage.extraEnvVars }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.backstage.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          volumeMounts:
            {{- if .Values.githubAppCredentials }}
            - name: github-app-credentials
              readOnly: true
              mountPath: /app/github-app-credentials.yaml
              subPath: github-app-credentials.yaml
            {{- end }}
            {{- if .Values.backstage.appConfig }}
            - name: backstage-app-config
              mountPath: "/app/app-config-from-configmap.yaml"
              subPath: app-config.yaml
            {{- end }}
            {{- if .Values.backstage.extraAppConfig }}
            {{- range .Values.backstage.extraAppConfig }}
            - name: {{ .configMapRef }}
              mountPath: "/app/{{ .filename }}"
              subPath: {{ .filename }}
            {{- end }}
            {{- end }}
            {{- if .Values.backstage.extraVolumeMounts }}
              {{- include "common.tplvalues.render" ( dict "value" .Values.backstage.extraVolumeMounts "context" $ ) | nindent 12 }}
            {{- end }}
            {{- if .Values.sharedConfig }}
            - name: backstage-shared-config
              mountPath: "/app/shared-config.yaml"
              subPath: shared-config.yaml
            {{- end }}
            {{- if eq .Values.database.engine "postgresql" }}
            - name: database-server-ca
              mountPath: /app/database-ca-certificate/ca.crt
              subPath: ca.crt
            {{- end }}
            {{- if .Values.pluginKeys }}
            {{- range .Values.pluginKeys }}
            - name: plugin-key-{{ .keyId }}
              mountPath: /app/plugin-keys/{{ .keyId }}/public.key
              subPath: public.key
            - name: plugin-key-{{ .keyId }}
              mountPath: /app/plugin-keys/{{ .keyId }}/private.key
              subPath: private.key
            {{- end }}
            {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          readinessProbe:
            httpGet:
              path: /.backstage/health/v1/readiness
              port: {{ .Values.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /.backstage/health/v1/liveness
              port: {{ .Values.port }}
            initialDelaySeconds: 10
            periodSeconds: 15
      volumes:
        {{- if .Values.githubAppCredentials }}
        - name: github-app-credentials
          secret:
            secretName: {{ .Values.name }}-github-app-credentials-secret
        {{- end }}
        {{- if .Values.backstage.appConfig }}
        - name: backstage-app-config
          configMap:
            name: {{ .Values.name }}-app-config-configmap
        {{- end }}
        {{- if .Values.backstage.extraAppConfig }}
        {{- range .Values.backstage.extraAppConfig }}
        - name: {{ .configMapRef }}
          configMap:
            name: {{ .configMapRef }}
        {{- end }}
        {{- end }}
        {{- if .Values.backstage.extraVolumes }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.backstage.extraVolumes "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.sharedConfig }}
        - name: backstage-shared-config
          configMap:
            name: {{ .Values.name }}-shared-config-configmap
        {{- end }}
        {{- if eq .Values.database.engine "postgresql" }}
        - name: database-server-ca
          secret:
            secretName: {{ .Chart.Name }}-{{ .Values.database.postgresql.clusterNameSuffix }}-ca
        {{- end }}
        {{- if .Values.pluginKeys }}
        {{- range .Values.pluginKeys }}
        - name: plugin-key-{{ .keyId }}
          secret:
            secretName: {{ $.Values.name }}-plugin-key-{{ .keyId }}-secret
        {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
