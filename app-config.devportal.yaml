app:
  title: Dev Portal
  baseUrl: https://devportal.giantswarm.io
  support:
    url: https://github.com/giantswarm/giantswarm/labels/component%2Fdevportal
    items:
      - title: Issues
        icon: github
        links:
          - url: https://github.com/giantswarm/giantswarm/labels/component%2Fdevportal
            title: GitHub Issues
      - title: Slack discussion
        icon: chat
        links:
          - url: https://gigantic.slack.com/archives/C055VLMTPFE
            title: '#wg-dev-portal'
  errorReporter:
    sentry:
      dsn: ${SENTRY_DSN_APP}
      environment: production
      releaseVersion: ${VERSION}
      tracesSampleRate: 0.5

organization:
  name: Giant Swarm

backend:
  auth:
    # TODO: once plugins have been migrated we can remove this, but right now it
    # is require for the backend to work
    dangerouslyDisableDefaultAuthPolicy: true
    keys:
      - secret: ${BACKEND_SECRET}
  baseUrl: https://devportal.giantswarm.io
  listen:
    port: 7007
    host: 0.0.0.0
  cors:
    origin: https://devportal.giantswarm.io
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
  # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src:
      - "'self'"
      - 'data:'
      - 'https://avatars.githubusercontent.com'
      - 'https://circleci.com'
      - 'https://codecov.io'
      - 'https://dl.circleci.com'
      - 'https://godoc.org'
      - 'https://goreportcard.com'
      - 'https://img.shields.io'
      - 'https://pkg.go.dev'
      - 'https://user-images.githubusercontent.com'
    script-src:
      - "'self'"
      - "'unsafe-eval'"
      - 'https://use.fortawesome.com'
    worker-src:
      - "'self'"
      - "'unsafe-eval'"
      - 'blob:'
  # config options: https://node-postgres.com/api/client
  # database:
  #   client: pg
  #   connection:
  #     host: ${POSTGRES_HOST}
  #     port: ${POSTGRES_PORT}
  #     user: ${POSTGRES_USER}
  #     password: ${POSTGRES_PASSWORD}
  #   https://node-postgres.com/features/ssl
  #   you can set the sslmode configuration option via the `PGSSLMODE` environment variable
  #   see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
  #   ssl:
  #     ca: # if you have a CA file and want to verify it you can uncomment this section
  #       $file: <file-path>/ca/server.crt
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  reading:
    allow:
      - host: '*.giantswarm.io'
  errorReporter:
    sentry:
      dsn: ${SENTRY_DSN_BACKEND}
      environment: production
      releaseVersion: ${VERSION}
      tracesSampleRate: 0.5

integrations:
  github:
    - host: github.com
      apps:
        - $include: github-app-${BACKSTAGE_ENVIRONMENT}-credentials.yaml

permission:
  enabled: true

proxy:
  endpoints:
    /circleci/api:
      target: https://circleci.com/api/v1.1
      headers:
        Circle-Token: ${CIRCLECI_API_TOKEN}
    /grafana/api:
      target: https://giantswarm.grafana.net/
      headers:
        Authorization: Bearer ${GRAFANA_TOKEN}
    /opsgenie/api:
      target: https://api.opsgenie.com
      headers:
        Authorization: GenieKey ${OPSGENIE_API_KEY}
    /quay/api:
      target: https://quay.io
      headers:
        X-Requested-With: XMLHttpRequest
        Authorization: Bearer ${QUAY_TOKEN}
      changeOrigin: true
      secure: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives: 'local'
  publisher:
    type: 'local' # Alternatives: 'googleGcs', 'awsS3'

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - name: gaggle
          url: https://happaapi.gaggle.azuretest.gigantic.io
          authProvider: oidc
          oidcTokenProvider: gs-gaggle
        - name: gazelle
          url: https://happaapi.gazelle.awsprod.gigantic.io
          authProvider: oidc
          oidcTokenProvider: gs-gazelle
        - name: golem
          url: https://happaapi.golem.gaws.gigantic.io
          authProvider: oidc
          oidcTokenProvider: gs-golem
        - name: grizzly
          url: https://happaapi.grizzly.gaws.gigantic.io
          authProvider: oidc
          oidcTokenProvider: gs-grizzly

auth:
  environment: production
  session:
    secret: ${AUTH_SESSION_SECRET}
  providers:
    github:
      development:
        clientId: ${GITHUB_OAUTH_CLIENT_ID}
        clientSecret: ${GITHUB_OAUTH_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
      production:
        clientId: ${GITHUB_OAUTH_CLIENT_ID}
        clientSecret: ${GITHUB_OAUTH_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
    gs-gaggle:
      development:
        metadataUrl: https://dex.gaggle.azuretest.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GAGGLE_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GAGGLE_CLIENT_SECRET}
      production:
        metadataUrl: https://dex.gaggle.azuretest.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GAGGLE_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GAGGLE_CLIENT_SECRET}
    gs-gazelle:
      development:
        metadataUrl: https://dex.gazelle.awsprod.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GAZELLE_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GAZELLE_CLIENT_SECRET}
      production:
        metadataUrl: https://dex.gazelle.awsprod.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GAZELLE_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GAZELLE_CLIENT_SECRET}
    gs-golem:
      development:
        metadataUrl: https://dex.golem.gaws.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GOLEM_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GOLEM_CLIENT_SECRET}
      production:
        metadataUrl: https://dex.golem.gaws.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GOLEM_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GOLEM_CLIENT_SECRET}
    gs-grizzly:
      development:
        metadataUrl: https://dex.grizzly.gaws.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GRIZZLY_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GRIZZLY_CLIENT_SECRET}
      production:
        metadataUrl: https://dex.grizzly.gaws.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GRIZZLY_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GRIZZLY_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

grafana:
  domain: https://giantswarm.grafana.net

opsgenie:
  domain: https://giantswarm.app.opsgenie.com

gs:
  installations:
    gaggle:
      pipeline: stable-testing
    gazelle:
      pipeline: stable
    golem:
      pipeline: testing
    grizzly:
      pipeline: stable-testing

catalog:
  rules:
    - allow:
        - API
        - Component
        - Domain
        - Group
        - Location
        - Resource
        - System
        - User
  locations:
    - type: url
      target: https://github.com/giantswarm/github/blob/main/catalog/*.yaml

quay:
  uiUrl: https://quay.io
