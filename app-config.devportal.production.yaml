app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: https://devportal.giantswarm.io
  errorReporter:
    sentry:
      dsn: ${SENTRY_DSN_APP}
      environment: production
      releaseVersion: ${VERSION}
      tracesSampleRate: 0.5

backend:
  baseUrl: https://devportal.giantswarm.io
  listen:
    port: 7007
    host: 0.0.0.0
  cors:
    origin: https://devportal.giantswarm.io

  # config options: https://node-postgres.com/api/client
  # database:
    # client: pg
    # connection:
    #   host: ${POSTGRES_HOST}
    #   port: ${POSTGRES_PORT}
    #   user: ${POSTGRES_USER}
    #   password: ${POSTGRES_PASSWORD}
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt
  errorReporter:
    sentry:
      dsn: ${SENTRY_DSN_BACKEND}
      environment: production
      releaseVersion: ${VERSION}
      tracesSampleRate: 0.5

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives: 'docker'
  publisher:
    type: 'local' # Alternatives: 'googleGcs', 'awsS3'

auth:
  environment: production
  session:
    secret: ${AUTH_SESSION_SECRET}
  providers:
    github:
      production:
        clientId: ${GITHUB_OAUTH_CLIENT_ID}
        clientSecret: ${GITHUB_OAUTH_CLIENT_SECRET}
    gs-gaggle:
      production:
        metadataUrl: https://dex.gaggle.azuretest.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GAGGLE_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GAGGLE_CLIENT_SECRET}
    gs-gazelle:
      production:
        metadataUrl: https://dex.gazelle.awsprod.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GAZELLE_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GAZELLE_CLIENT_SECRET}
    gs-glippy:
      production:
        metadataUrl: https://dex.glippy.azuretest.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GLIPPY_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GLIPPY_CLIENT_SECRET}
    # gs-goat:
    #   production:
    #     metadataUrl: https://dex.goat.gaws.gigantic.io/.well-known/openid-configuration
    #     clientId: ${AUTH_DEX_GOAT_CLIENT_ID}
    #     clientSecret: ${AUTH_DEX_GOAT_CLIENT_SECRET}
    gs-golem:
      production:
        metadataUrl: https://dex.golem.gaws.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GOLEM_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GOLEM_CLIENT_SECRET}
    # gs-goose:
    #   production:
    #     metadataUrl: https://dex.goose.azuretest.gigantic.io/.well-known/openid-configuration
    #     clientId: ${AUTH_DEX_GOOSE_CLIENT_ID}
    #     clientSecret: ${AUTH_DEX_GOOSE_CLIENT_SECRET}
    # gs-goten:
    #   production:
    #     metadataUrl: https://dex.goten.gaws.gigantic.io/.well-known/openid-configuration
    #     clientId: ${AUTH_DEX_GOTEN_CLIENT_ID}
    #     clientSecret: ${AUTH_DEX_GOTEN_CLIENT_SECRET}
    gs-grizzly:
      production:
        metadataUrl: https://dex.grizzly.gaws.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_GRIZZLY_CLIENT_ID}
        clientSecret: ${AUTH_DEX_GRIZZLY_CLIENT_SECRET}
    gs-snail:
      production:
        metadataUrl: https://dex.snail.gaws.gigantic.io/.well-known/openid-configuration
        clientId: ${AUTH_DEX_SNAIL_CLIENT_ID}
        clientSecret: ${AUTH_DEX_SNAIL_CLIENT_SECRET}
